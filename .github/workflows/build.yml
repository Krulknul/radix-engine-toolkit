name: Build

on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - develop
      - main

jobs:
  build:
    runs-on: macos-latest
    continue-on-error: false
    strategy:
      matrix:
        build-target:
          - crate: radix-engine-toolkit-native
            target-triple: aarch64-apple-darwin
            custom-linker: ""
            custom-compiler: /usr/local/opt/llvm/bin/clang
            custom-archiver: /usr/local/opt/llvm/bin/llvm-ar

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Build Dependencies
        run: |
          brew tap SergioBenitez/osxct
          brew install llvm
          brew install x86_64-unknown-linux-gnu
          brew install mingw-w64

      - name: Install Rust Toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup.sh
          chmod +x rustup.sh
          ./rustup.sh -y
          rustup update
          rustup toolchain install nightly

      - name: Install Rust Targets
        run: |
          rustup target install ${{ matrix.build-target.target-triple }}
          rustup +nightly target install ${{ matrix.build-target.target-triple }}
          rustup component add rust-src --toolchain nightly-x86_64-apple-darwin

      - name: Building Toolkit
        run: |
          export CURRENT_DIRECTORY=$(pwd)
          export CRATE_PATH="$CURRENT_DIRECTORY/${{matrix.build-target.crate}}"
          cd $CRATE_PATH

          export LINKER_ENVIRONMENT_VARIABLE=$(echo ${{ matrix.build-target.target-triple }} | tr '[:lower:]' '[:upper:]' | sed 's/-/_/g')
          
          export $LINKER_ENVIRONMENT_VARIABLE=${{ matrix.build-target.custom-linker }}
          export CC=${{ matrix.build-target.custom-compiler }}
          export AR=${{ matrix.build-target.custom-archiver }}

          cargo +nightly build \
            -Z build-std=std,panic_abort \
            -Z build-std-features=panic_immediate_abort \
            --target ${{ matrix.build-target.target-triple }} \
            --release

          export $LINKER_ENVIRONMENT_VARIABLE=""
          export CC="/usr/local/opt/llvm/bin/clang"
          export AR="/usr/local/opt/llvm/bin/llvm-ar"

          INCLUDE_DIRECTORY_PATH="$CRATE_PATH/target/${{ matrix.build-target.target-triple }}/release/include"
          mkdir $INCLUDE_DIRECTORY_PATH

          rustup default nightly
          cbindgen \
            --lang c \
            --config cbindgen.toml \
            --output "$INCLUDE_DIRECTORY_PATH/libradix_engine_toolkit.h" 
          rustup default stable

          echo "module RadixEngineToolkit {" > "$INCLUDE_DIRECTORY_PATH/module.modulemap" 
          echo "  umbrella header \"libradix_engine_toolkit.h\"" >> "$INCLUDE_DIRECTORY_PATH/module.modulemap" 
          echo "  export *" >> "$INCLUDE_DIRECTORY_PATH/module.modulemap" 
          echo "}" >> "$INCLUDE_DIRECTORY_PATH/module.modulemap" 

          (
            BUILD_PATH="$CRATE_PATH/target/${{ matrix.build-target.target-triple }}/release"
            cd $BUILD_PATH

            BUILD_ARTIFACTS_PATH=$(find . -type f \( -name "*.a" -o -name "*.dylib" -o -name "*.dll" -o -name "*.so" -o -name "*.d" -o -name "*.wasm" \) -maxdepth 1)
            tar -czf "./${{ matrix.build-target.target-triple }}.tar.gz" $BUILD_ARTIFACTS_PATH ./include
          )

      - name: Build XCFramework
        run: |
          CRATE_NAME="radix-engine-toolkit-native"
          CRATE_PATH="$CURRENT_DIRECTORY/$CRATE_NAME"
          cd $CRATE_PATH

          mkdir $CRATE_PATH/target/macos-arm64_x86_64/
          mkdir $CRATE_PATH/target/ios-simulator-arm64_x86_64

          lipo -create \
              "$CRATE_PATH/target/aarch64-apple-darwin/release/$LIBRARY_NAME.a" \
              "$CRATE_PATH/target/x86_64-apple-darwin/release/$LIBRARY_NAME.a" \
              -o "$CRATE_PATH/target/macos-arm64_x86_64/$LIBRARY_NAME.a"
          lipo -create \
              "$CRATE_PATH/target/aarch64-apple-ios-sim/release/$LIBRARY_NAME.a" \
              "$CRATE_PATH/target/x86_64-apple-ios/release/$LIBRARY_NAME.a" \
              -o "$CRATE_PATH/target/ios-simulator-arm64_x86_64/$LIBRARY_NAME.a"

          cp -r $CRATE_PATH/target/aarch64-apple-darwin/release/include $CRATE_PATH/target/macos-arm64_x86_64/
          cp -r $CRATE_PATH/target/aarch64-apple-ios-sim/release/include $CRATE_PATH/target/ios-simulator-arm64_x86_64/

          xcodebuild -create-xcframework \
              -library "$CRATE_PATH/target/aarch64-apple-ios/release/$LIBRARY_NAME.a" \
              -headers "$CRATE_PATH/target/aarch64-apple-ios/release/include" \
              -library "$CRATE_PATH/target/macos-arm64_x86_64/$LIBRARY_NAME.a" \
              -headers "$CRATE_PATH/target/macos-arm64_x86_64/include" \
              -library "$CRATE_PATH/target/ios-simulator-arm64_x86_64/$LIBRARY_NAME.a" \
              -headers "$CRATE_PATH/target/ios-simulator-arm64_x86_64/include" \
              -output "$CRATE_PATH/target/RadixEngineToolkit.xcframework"

          rm -rf $CRATE_PATH/target/macos-arm64_x86_64/
          rm -rf $CRATE_PATH/target/ios-simulator-arm64_x86_64

      - name: Aggregate and Collect Builds
        run: |
          BUILDS_DIRECTORY="$SCRIPT_DIR/build"
          [[ -d $BUILDS_DIRECTORY ]] && rm -r $BUILDS_DIRECTORY
          mkdir $BUILDS_DIRECTORY

          for crate_name in "radix-engine-toolkit-jni" "radix-engine-toolkit-native" "radix-engine-toolkit-wasm"; 
          do
              CRATE_PATH="$SCRIPT_DIR/$crate_name"
              TARGET_PATH="$CRATE_PATH/target"

              ARGUMENTS=""
              for path in $(find $TARGET_PATH \( -name "*.xcframework" -o -name "*.tar.gz" \) -maxdepth 3);
              do
                  ARTIFACT_DIRECTORY_PATH=$(cd $(dirname $path); pwd)
                  ARTIFACT_FILE_NAME=$(basename $path)

                  ARGUMENTS+=" -C $ARTIFACT_DIRECTORY_PATH $ARTIFACT_FILE_NAME "
              done
              gtar -czf "$BUILDS_DIRECTORY/$crate_name.tar.gz" $ARGUMENTS
          done
          

      # - name: Build ${{ matrix.target }}
      #   continue-on-error: true
      #   run: |
      #     rustup target add ${{ matrix.rust-target }}
      #     rustup +nightly target add ${{ matrix.rust-target }}
      #     rustup component add rust-src --toolchain nightly-x86_64-apple-darwin
      #     cargo install --force cbindgen cross
      #     brew install llvm
      #     export AR="/usr/local/opt/llvm/bin/llvm-ar"
      #     export CC="/usr/local/opt/llvm/bin/clang"
      #     brew install binaryen
      #     ./build.sh radix-engine-toolkit-${{ matrix.target }}

      # - name: Upload ${{ matrix.target }} artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: radix-engine-toolkit-${{ matrix.target }}
      #     path: build/radix-engine-toolkit-${{ matrix.target }}-*
