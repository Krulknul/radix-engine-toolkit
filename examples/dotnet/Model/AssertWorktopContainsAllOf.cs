/*
 * Transaction Lib
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;


namespace Model
{
    /// <summary>
    /// AssertWorktopContainsAllOf
    /// </summary>
    [DataContract]
    public partial class AssertWorktopContainsAllOf :  IEquatable<AssertWorktopContainsAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssertWorktopContainsAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssertWorktopContainsAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssertWorktopContainsAllOf" /> class.
        /// </summary>
        /// <param name="resourceAddress">resourceAddress (required).</param>
        public AssertWorktopContainsAllOf(ResourceAddress resourceAddress = default(ResourceAddress))
        {
            // to ensure "resourceAddress" is required (not null)
            if (resourceAddress == null)
            {
                throw new InvalidDataException("resourceAddress is a required property for AssertWorktopContainsAllOf and cannot be null");
            }
            else
            {
                this.ResourceAddress = resourceAddress;
            }

        }

        /// <summary>
        /// Gets or Sets ResourceAddress
        /// </summary>
        [DataMember(Name="resource_address", EmitDefaultValue=true)]
        public ResourceAddress ResourceAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssertWorktopContainsAllOf {\n");
            sb.Append("  ResourceAddress: ").Append(ResourceAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssertWorktopContainsAllOf);
        }

        /// <summary>
        /// Returns true if AssertWorktopContainsAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of AssertWorktopContainsAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssertWorktopContainsAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourceAddress == input.ResourceAddress ||
                    (this.ResourceAddress != null &&
                    this.ResourceAddress.Equals(input.ResourceAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourceAddress != null)
                    hashCode = hashCode * 59 + this.ResourceAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
