/*
 * Transaction Lib
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Model
{
    /// <summary>
    /// InvalidTypeAllOf
    /// </summary>
    [DataContract]
    public partial class InvalidTypeAllOf :  IEquatable<InvalidTypeAllOf>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ExpectedType
        /// </summary>
        [DataMember(Name="expected_type", EmitDefaultValue=true)]
        public ValueKind ExpectedType { get; set; }
        /// <summary>
        /// Gets or Sets ActualType
        /// </summary>
        [DataMember(Name="actual_type", EmitDefaultValue=true)]
        public ValueKind ActualType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidTypeAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvalidTypeAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvalidTypeAllOf" /> class.
        /// </summary>
        /// <param name="expectedType">expectedType (required).</param>
        /// <param name="actualType">actualType (required).</param>
        public InvalidTypeAllOf(ValueKind expectedType = default(ValueKind), ValueKind actualType = default(ValueKind))
        {
            // to ensure "expectedType" is required (not null)
            if (expectedType == null)
            {
                throw new InvalidDataException("expectedType is a required property for InvalidTypeAllOf and cannot be null");
            }
            else
            {
                this.ExpectedType = expectedType;
            }

            // to ensure "actualType" is required (not null)
            if (actualType == null)
            {
                throw new InvalidDataException("actualType is a required property for InvalidTypeAllOf and cannot be null");
            }
            else
            {
                this.ActualType = actualType;
            }

        }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvalidTypeAllOf {\n");
            sb.Append("  ExpectedType: ").Append(ExpectedType).Append("\n");
            sb.Append("  ActualType: ").Append(ActualType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvalidTypeAllOf);
        }

        /// <summary>
        /// Returns true if InvalidTypeAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of InvalidTypeAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvalidTypeAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpectedType == input.ExpectedType ||
                    (this.ExpectedType != null &&
                    this.ExpectedType.Equals(input.ExpectedType))
                ) && 
                (
                    this.ActualType == input.ActualType ||
                    (this.ActualType != null &&
                    this.ActualType.Equals(input.ActualType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpectedType != null)
                    hashCode = hashCode * 59 + this.ExpectedType.GetHashCode();
                if (this.ActualType != null)
                    hashCode = hashCode * 59 + this.ActualType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
