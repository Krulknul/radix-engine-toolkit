/*
 * Transaction Lib
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Model
{
    /// <summary>
    /// NotarizedTransactionIntent
    /// </summary>
    [DataContract]
    public partial class NotarizedTransactionIntent :  IEquatable<NotarizedTransactionIntent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotarizedTransactionIntent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotarizedTransactionIntent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotarizedTransactionIntent" /> class.
        /// </summary>
        /// <param name="signedIntent">signedIntent (required).</param>
        /// <param name="notarySignature">notarySignature (required).</param>
        public NotarizedTransactionIntent(SignedTransactionIntent signedIntent = default(SignedTransactionIntent), string notarySignature = default(string))
        {
            // to ensure "signedIntent" is required (not null)
            if (signedIntent == null)
            {
                throw new InvalidDataException("signedIntent is a required property for NotarizedTransactionIntent and cannot be null");
            }
            else
            {
                this.SignedIntent = signedIntent;
            }

            // to ensure "notarySignature" is required (not null)
            if (notarySignature == null)
            {
                throw new InvalidDataException("notarySignature is a required property for NotarizedTransactionIntent and cannot be null");
            }
            else
            {
                this.NotarySignature = notarySignature;
            }

        }

        /// <summary>
        /// Gets or Sets SignedIntent
        /// </summary>
        [DataMember(Name="signed_intent", EmitDefaultValue=true)]
        public SignedTransactionIntent SignedIntent { get; set; }

        /// <summary>
        /// Gets or Sets NotarySignature
        /// </summary>
        [DataMember(Name="notary_signature", EmitDefaultValue=true)]
        public string NotarySignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotarizedTransactionIntent {\n");
            sb.Append("  SignedIntent: ").Append(SignedIntent).Append("\n");
            sb.Append("  NotarySignature: ").Append(NotarySignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotarizedTransactionIntent);
        }

        /// <summary>
        /// Returns true if NotarizedTransactionIntent instances are equal
        /// </summary>
        /// <param name="input">Instance of NotarizedTransactionIntent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotarizedTransactionIntent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SignedIntent == input.SignedIntent ||
                    (this.SignedIntent != null &&
                    this.SignedIntent.Equals(input.SignedIntent))
                ) && 
                (
                    this.NotarySignature == input.NotarySignature ||
                    (this.NotarySignature != null &&
                    this.NotarySignature.Equals(input.NotarySignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignedIntent != null)
                    hashCode = hashCode * 59 + this.SignedIntent.GetHashCode();
                if (this.NotarySignature != null)
                    hashCode = hashCode * 59 + this.NotarySignature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
