/*
 * Transaction Lib
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace Model
{
    /// <summary>
    /// TransactionHeader
    /// </summary>
    [DataContract]
    public partial class TransactionHeader :  IEquatable<TransactionHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionHeader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionHeader" /> class.
        /// </summary>
        /// <param name="version">version (required).</param>
        /// <param name="networkId">networkId (required).</param>
        /// <param name="startEpochInclusive">startEpochInclusive (required).</param>
        /// <param name="endEpochExclusive">endEpochExclusive (required).</param>
        /// <param name="nonce">nonce (required).</param>
        /// <param name="notaryPublicKey">notaryPublicKey (required).</param>
        /// <param name="notaryAsSignatory">notaryAsSignatory (required).</param>
        /// <param name="costUnitLimit">costUnitLimit (required).</param>
        /// <param name="tipPercentage">tipPercentage (required).</param>
        public TransactionHeader(byte version = default(byte), byte networkId = default(byte), UInt64 startEpochInclusive = default(UInt64), UInt64 endEpochExclusive = default(UInt64), UInt64 nonce = default(UInt64), string notaryPublicKey = default(string), bool notaryAsSignatory = default(bool), UInt32 costUnitLimit = default(UInt32), UInt32 tipPercentage = default(UInt32))
        {
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for TransactionHeader and cannot be null");
            }
            else
            {
                this._Version = version;
            }

            // to ensure "networkId" is required (not null)
            if (networkId == null)
            {
                throw new InvalidDataException("networkId is a required property for TransactionHeader and cannot be null");
            }
            else
            {
                this.NetworkId = networkId;
            }

            // to ensure "startEpochInclusive" is required (not null)
            if (startEpochInclusive == null)
            {
                throw new InvalidDataException("startEpochInclusive is a required property for TransactionHeader and cannot be null");
            }
            else
            {
                this.StartEpochInclusive = startEpochInclusive;
            }

            // to ensure "endEpochExclusive" is required (not null)
            if (endEpochExclusive == null)
            {
                throw new InvalidDataException("endEpochExclusive is a required property for TransactionHeader and cannot be null");
            }
            else
            {
                this.EndEpochExclusive = endEpochExclusive;
            }

            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new InvalidDataException("nonce is a required property for TransactionHeader and cannot be null");
            }
            else
            {
                this.Nonce = nonce;
            }

            // to ensure "notaryPublicKey" is required (not null)
            if (notaryPublicKey == null)
            {
                throw new InvalidDataException("notaryPublicKey is a required property for TransactionHeader and cannot be null");
            }
            else
            {
                this.NotaryPublicKey = notaryPublicKey;
            }

            // to ensure "notaryAsSignatory" is required (not null)
            if (notaryAsSignatory == null)
            {
                throw new InvalidDataException("notaryAsSignatory is a required property for TransactionHeader and cannot be null");
            }
            else
            {
                this.NotaryAsSignatory = notaryAsSignatory;
            }

            // to ensure "costUnitLimit" is required (not null)
            if (costUnitLimit == null)
            {
                throw new InvalidDataException("costUnitLimit is a required property for TransactionHeader and cannot be null");
            }
            else
            {
                this.CostUnitLimit = costUnitLimit;
            }

            // to ensure "tipPercentage" is required (not null)
            if (tipPercentage == null)
            {
                throw new InvalidDataException("tipPercentage is a required property for TransactionHeader and cannot be null");
            }
            else
            {
                this.TipPercentage = tipPercentage;
            }

        }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public byte _Version { get; set; }

        /// <summary>
        /// Gets or Sets NetworkId
        /// </summary>
        [DataMember(Name="network_id", EmitDefaultValue=true)]
        public byte NetworkId { get; set; }

        /// <summary>
        /// Gets or Sets StartEpochInclusive
        /// </summary>
        [DataMember(Name="start_epoch_inclusive", EmitDefaultValue=true)]
        public UInt64 StartEpochInclusive { get; set; }

        /// <summary>
        /// Gets or Sets EndEpochExclusive
        /// </summary>
        [DataMember(Name="end_epoch_exclusive", EmitDefaultValue=true)]
        public UInt64 EndEpochExclusive { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name="nonce", EmitDefaultValue=true)]
        public UInt64 Nonce { get; set; }

        /// <summary>
        /// Gets or Sets NotaryPublicKey
        /// </summary>
        [DataMember(Name="notary_public_key", EmitDefaultValue=true)]
        public string NotaryPublicKey { get; set; }

        /// <summary>
        /// Gets or Sets NotaryAsSignatory
        /// </summary>
        [DataMember(Name="notary_as_signatory", EmitDefaultValue=true)]
        public bool NotaryAsSignatory { get; set; }

        /// <summary>
        /// Gets or Sets CostUnitLimit
        /// </summary>
        [DataMember(Name="cost_unit_limit", EmitDefaultValue=true)]
        public UInt32 CostUnitLimit { get; set; }

        /// <summary>
        /// Gets or Sets TipPercentage
        /// </summary>
        [DataMember(Name="tip_percentage", EmitDefaultValue=true)]
        public UInt32 TipPercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionHeader {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  NetworkId: ").Append(NetworkId).Append("\n");
            sb.Append("  StartEpochInclusive: ").Append(StartEpochInclusive).Append("\n");
            sb.Append("  EndEpochExclusive: ").Append(EndEpochExclusive).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  NotaryPublicKey: ").Append(NotaryPublicKey).Append("\n");
            sb.Append("  NotaryAsSignatory: ").Append(NotaryAsSignatory).Append("\n");
            sb.Append("  CostUnitLimit: ").Append(CostUnitLimit).Append("\n");
            sb.Append("  TipPercentage: ").Append(TipPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionHeader);
        }

        /// <summary>
        /// Returns true if TransactionHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.NetworkId == input.NetworkId ||
                    (this.NetworkId != null &&
                    this.NetworkId.Equals(input.NetworkId))
                ) && 
                (
                    this.StartEpochInclusive == input.StartEpochInclusive ||
                    (this.StartEpochInclusive != null &&
                    this.StartEpochInclusive.Equals(input.StartEpochInclusive))
                ) && 
                (
                    this.EndEpochExclusive == input.EndEpochExclusive ||
                    (this.EndEpochExclusive != null &&
                    this.EndEpochExclusive.Equals(input.EndEpochExclusive))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.NotaryPublicKey == input.NotaryPublicKey ||
                    (this.NotaryPublicKey != null &&
                    this.NotaryPublicKey.Equals(input.NotaryPublicKey))
                ) && 
                (
                    this.NotaryAsSignatory == input.NotaryAsSignatory ||
                    (this.NotaryAsSignatory != null &&
                    this.NotaryAsSignatory.Equals(input.NotaryAsSignatory))
                ) && 
                (
                    this.CostUnitLimit == input.CostUnitLimit ||
                    (this.CostUnitLimit != null &&
                    this.CostUnitLimit.Equals(input.CostUnitLimit))
                ) && 
                (
                    this.TipPercentage == input.TipPercentage ||
                    (this.TipPercentage != null &&
                    this.TipPercentage.Equals(input.TipPercentage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.NetworkId != null)
                    hashCode = hashCode * 59 + this.NetworkId.GetHashCode();
                if (this.StartEpochInclusive != null)
                    hashCode = hashCode * 59 + this.StartEpochInclusive.GetHashCode();
                if (this.EndEpochExclusive != null)
                    hashCode = hashCode * 59 + this.EndEpochExclusive.GetHashCode();
                if (this.Nonce != null)
                    hashCode = hashCode * 59 + this.Nonce.GetHashCode();
                if (this.NotaryPublicKey != null)
                    hashCode = hashCode * 59 + this.NotaryPublicKey.GetHashCode();
                if (this.NotaryAsSignatory != null)
                    hashCode = hashCode * 59 + this.NotaryAsSignatory.GetHashCode();
                if (this.CostUnitLimit != null)
                    hashCode = hashCode * 59 + this.CostUnitLimit.GetHashCode();
                if (this.TipPercentage != null)
                    hashCode = hashCode * 59 + this.TipPercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // _Version (decimal) maximum
            if(this._Version > (decimal)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for _Version, must be a value less than or equal to 255.", new [] { "_Version" });
            }

            // _Version (decimal) minimum
            if(this._Version < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for _Version, must be a value greater than or equal to 0.", new [] { "_Version" });
            }



            // NetworkId (decimal) maximum
            if(this.NetworkId > (decimal)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NetworkId, must be a value less than or equal to 255.", new [] { "NetworkId" });
            }

            // NetworkId (decimal) minimum
            if(this.NetworkId < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NetworkId, must be a value greater than or equal to 0.", new [] { "NetworkId" });
            }



            // StartEpochInclusive (decimal) maximum
            if(this.StartEpochInclusive > (decimal)18446744073709551615)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartEpochInclusive, must be a value less than or equal to 18446744073709551615.", new [] { "StartEpochInclusive" });
            }

            // StartEpochInclusive (decimal) minimum
            if(this.StartEpochInclusive < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartEpochInclusive, must be a value greater than or equal to 0.", new [] { "StartEpochInclusive" });
            }



            // EndEpochExclusive (decimal) maximum
            if(this.EndEpochExclusive > (decimal)18446744073709551615)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndEpochExclusive, must be a value less than or equal to 18446744073709551615.", new [] { "EndEpochExclusive" });
            }

            // EndEpochExclusive (decimal) minimum
            if(this.EndEpochExclusive < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndEpochExclusive, must be a value greater than or equal to 0.", new [] { "EndEpochExclusive" });
            }



            // Nonce (decimal) maximum
            if(this.Nonce > (decimal)18446744073709551615)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nonce, must be a value less than or equal to 18446744073709551615.", new [] { "Nonce" });
            }

            // Nonce (decimal) minimum
            if(this.Nonce < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nonce, must be a value greater than or equal to 0.", new [] { "Nonce" });
            }



            // CostUnitLimit (decimal) maximum
            if(this.CostUnitLimit > (decimal)4294967295)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CostUnitLimit, must be a value less than or equal to 4294967295.", new [] { "CostUnitLimit" });
            }

            // CostUnitLimit (decimal) minimum
            if(this.CostUnitLimit < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CostUnitLimit, must be a value greater than or equal to 0.", new [] { "CostUnitLimit" });
            }



            // TipPercentage (decimal) maximum
            if(this.TipPercentage > (decimal)4294967295)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TipPercentage, must be a value less than or equal to 4294967295.", new [] { "TipPercentage" });
            }

            // TipPercentage (decimal) minimum
            if(this.TipPercentage < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TipPercentage, must be a value greater than or equal to 0.", new [] { "TipPercentage" });
            }

            yield break;
        }
    }

}
