/*
 * Transaction Lib
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Models
{
    /// <summary>
    /// DecompileUnknownTransactionIntentResponse
    /// </summary>
    [DataContract]
    public partial class DecompileUnknownTransactionIntentResponse : IEquatable<DecompileUnknownTransactionIntentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecompileUnknownTransactionIntentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DecompileUnknownTransactionIntentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DecompileUnknownTransactionIntentResponse" /> class.
        /// </summary>
        /// <param name="header">header (required).</param>
        /// <param name="manifest">manifest (required).</param>
        /// <param name="transactionIntent">transactionIntent (required).</param>
        /// <param name="signatures">signatures (required).</param>
        /// <param name="signedIntent">signedIntent (required).</param>
        /// <param name="notarySignature">notarySignature (required).</param>
        public DecompileUnknownTransactionIntentResponse(TransactionHeader header = default(TransactionHeader), Manifest manifest = default(Manifest), TransactionIntent transactionIntent = default(TransactionIntent), List<Signature> signatures = default(List<Signature>), SignedTransactionIntent signedIntent = default(SignedTransactionIntent), string notarySignature = default(string))
        {
            // to ensure "header" is required (not null)
            if (header == null)
            {
                throw new InvalidDataException("header is a required property for DecompileUnknownTransactionIntentResponse and cannot be null");
            }
            else
            {
                this.Header = header;
            }

            // to ensure "manifest" is required (not null)
            if (manifest == null)
            {
                throw new InvalidDataException("manifest is a required property for DecompileUnknownTransactionIntentResponse and cannot be null");
            }
            else
            {
                this.Manifest = manifest;
            }

            // to ensure "transactionIntent" is required (not null)
            if (transactionIntent == null)
            {
                throw new InvalidDataException("transactionIntent is a required property for DecompileUnknownTransactionIntentResponse and cannot be null");
            }
            else
            {
                this.TransactionIntent = transactionIntent;
            }

            // to ensure "signatures" is required (not null)
            if (signatures == null)
            {
                throw new InvalidDataException("signatures is a required property for DecompileUnknownTransactionIntentResponse and cannot be null");
            }
            else
            {
                this.Signatures = signatures;
            }

            // to ensure "signedIntent" is required (not null)
            if (signedIntent == null)
            {
                throw new InvalidDataException("signedIntent is a required property for DecompileUnknownTransactionIntentResponse and cannot be null");
            }
            else
            {
                this.SignedIntent = signedIntent;
            }

            // to ensure "notarySignature" is required (not null)
            if (notarySignature == null)
            {
                throw new InvalidDataException("notarySignature is a required property for DecompileUnknownTransactionIntentResponse and cannot be null");
            }
            else
            {
                this.NotarySignature = notarySignature;
            }

        }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "header", EmitDefaultValue = true)]
        public TransactionHeader Header { get; set; }

        /// <summary>
        /// Gets or Sets Manifest
        /// </summary>
        [DataMember(Name = "manifest", EmitDefaultValue = true)]
        public Manifest Manifest { get; set; }

        /// <summary>
        /// Gets or Sets TransactionIntent
        /// </summary>
        [DataMember(Name = "transaction_intent", EmitDefaultValue = true)]
        public TransactionIntent TransactionIntent { get; set; }

        /// <summary>
        /// Gets or Sets Signatures
        /// </summary>
        [DataMember(Name = "signatures", EmitDefaultValue = true)]
        public List<Signature> Signatures { get; set; }

        /// <summary>
        /// Gets or Sets SignedIntent
        /// </summary>
        [DataMember(Name = "signed_intent", EmitDefaultValue = true)]
        public SignedTransactionIntent SignedIntent { get; set; }

        /// <summary>
        /// Gets or Sets NotarySignature
        /// </summary>
        [DataMember(Name = "notary_signature", EmitDefaultValue = true)]
        public string NotarySignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DecompileUnknownTransactionIntentResponse {\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Manifest: ").Append(Manifest).Append("\n");
            sb.Append("  TransactionIntent: ").Append(TransactionIntent).Append("\n");
            sb.Append("  Signatures: ").Append(Signatures).Append("\n");
            sb.Append("  SignedIntent: ").Append(SignedIntent).Append("\n");
            sb.Append("  NotarySignature: ").Append(NotarySignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DecompileUnknownTransactionIntentResponse);
        }

        /// <summary>
        /// Returns true if DecompileUnknownTransactionIntentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DecompileUnknownTransactionIntentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecompileUnknownTransactionIntentResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) &&
                (
                    this.Manifest == input.Manifest ||
                    (this.Manifest != null &&
                    this.Manifest.Equals(input.Manifest))
                ) &&
                (
                    this.TransactionIntent == input.TransactionIntent ||
                    (this.TransactionIntent != null &&
                    this.TransactionIntent.Equals(input.TransactionIntent))
                ) &&
                (
                    this.Signatures == input.Signatures ||
                    this.Signatures != null &&
                    input.Signatures != null &&
                    this.Signatures.SequenceEqual(input.Signatures)
                ) &&
                (
                    this.SignedIntent == input.SignedIntent ||
                    (this.SignedIntent != null &&
                    this.SignedIntent.Equals(input.SignedIntent))
                ) &&
                (
                    this.NotarySignature == input.NotarySignature ||
                    (this.NotarySignature != null &&
                    this.NotarySignature.Equals(input.NotarySignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Header != null)
                    hashCode = hashCode * 59 + this.Header.GetHashCode();
                if (this.Manifest != null)
                    hashCode = hashCode * 59 + this.Manifest.GetHashCode();
                if (this.TransactionIntent != null)
                    hashCode = hashCode * 59 + this.TransactionIntent.GetHashCode();
                if (this.Signatures != null)
                    hashCode = hashCode * 59 + this.Signatures.GetHashCode();
                if (this.SignedIntent != null)
                    hashCode = hashCode * 59 + this.SignedIntent.GetHashCode();
                if (this.NotarySignature != null)
                    hashCode = hashCode * 59 + this.NotarySignature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
