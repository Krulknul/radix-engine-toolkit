/*
 * Transaction Library
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing Instruction
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class InstructionTests
    {
        // TODO uncomment below to declare an instance variable for Instruction
        //private Instruction instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Instruction
            //instance = new Instruction();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Instruction
        /// </summary>
        [Test]
        public void InstructionInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" Instruction
            //Assert.IsInstanceOf(typeof(Instruction), instance);
        }

        /// <summary>
        /// Test deserialize a AssertWorktopContains from type Instruction
        /// </summary>
        [Test]
        public void AssertWorktopContainsDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a AssertWorktopContains from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new AssertWorktopContains().ToJson()));
        }
        /// <summary>
        /// Test deserialize a AssertWorktopContainsByAmount from type Instruction
        /// </summary>
        [Test]
        public void AssertWorktopContainsByAmountDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a AssertWorktopContainsByAmount from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new AssertWorktopContainsByAmount().ToJson()));
        }
        /// <summary>
        /// Test deserialize a AssertWorktopContainsByIds from type Instruction
        /// </summary>
        [Test]
        public void AssertWorktopContainsByIdsDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a AssertWorktopContainsByIds from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new AssertWorktopContainsByIds().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CallFunction from type Instruction
        /// </summary>
        [Test]
        public void CallFunctionDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a CallFunction from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new CallFunction().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CallMethod from type Instruction
        /// </summary>
        [Test]
        public void CallMethodDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a CallMethod from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new CallMethod().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CallMethodWithAllResources from type Instruction
        /// </summary>
        [Test]
        public void CallMethodWithAllResourcesDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a CallMethodWithAllResources from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new CallMethodWithAllResources().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ClearAuthZone from type Instruction
        /// </summary>
        [Test]
        public void ClearAuthZoneDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a ClearAuthZone from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new ClearAuthZone().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CloneProof from type Instruction
        /// </summary>
        [Test]
        public void CloneProofDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a CloneProof from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new CloneProof().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CreateProofFromAuthZone from type Instruction
        /// </summary>
        [Test]
        public void CreateProofFromAuthZoneDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a CreateProofFromAuthZone from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new CreateProofFromAuthZone().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CreateProofFromAuthZoneByAmount from type Instruction
        /// </summary>
        [Test]
        public void CreateProofFromAuthZoneByAmountDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a CreateProofFromAuthZoneByAmount from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new CreateProofFromAuthZoneByAmount().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CreateProofFromAuthZoneByIds from type Instruction
        /// </summary>
        [Test]
        public void CreateProofFromAuthZoneByIdsDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a CreateProofFromAuthZoneByIds from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new CreateProofFromAuthZoneByIds().ToJson()));
        }
        /// <summary>
        /// Test deserialize a CreateProofFromBucket from type Instruction
        /// </summary>
        [Test]
        public void CreateProofFromBucketDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a CreateProofFromBucket from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new CreateProofFromBucket().ToJson()));
        }
        /// <summary>
        /// Test deserialize a DropAllProofs from type Instruction
        /// </summary>
        [Test]
        public void DropAllProofsDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a DropAllProofs from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new DropAllProofs().ToJson()));
        }
        /// <summary>
        /// Test deserialize a DropProof from type Instruction
        /// </summary>
        [Test]
        public void DropProofDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a DropProof from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new DropProof().ToJson()));
        }
        /// <summary>
        /// Test deserialize a PopFromAuthZone from type Instruction
        /// </summary>
        [Test]
        public void PopFromAuthZoneDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a PopFromAuthZone from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new PopFromAuthZone().ToJson()));
        }
        /// <summary>
        /// Test deserialize a PublishPackage from type Instruction
        /// </summary>
        [Test]
        public void PublishPackageDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a PublishPackage from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new PublishPackage().ToJson()));
        }
        /// <summary>
        /// Test deserialize a PushToAuthZone from type Instruction
        /// </summary>
        [Test]
        public void PushToAuthZoneDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a PushToAuthZone from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new PushToAuthZone().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ReturnToWorktop from type Instruction
        /// </summary>
        [Test]
        public void ReturnToWorktopDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a ReturnToWorktop from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new ReturnToWorktop().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TakeFromWorktop from type Instruction
        /// </summary>
        [Test]
        public void TakeFromWorktopDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a TakeFromWorktop from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new TakeFromWorktop().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TakeFromWorktopByAmount from type Instruction
        /// </summary>
        [Test]
        public void TakeFromWorktopByAmountDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a TakeFromWorktopByAmount from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new TakeFromWorktopByAmount().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TakeFromWorktopByIds from type Instruction
        /// </summary>
        [Test]
        public void TakeFromWorktopByIdsDeserializeFromInstructionTest()
        {
            // TODO uncomment below to test deserialize a TakeFromWorktopByIds from type Instruction
            //Assert.IsInstanceOf(typeof(Instruction), JsonConvert.DeserializeObject<Instruction>(new TakeFromWorktopByIds().ToJson()));
        }

        /// <summary>
        /// Test the property '_Instruction'
        /// </summary>
        [Test]
        public void _InstructionTest()
        {
            // TODO unit test for the property '_Instruction'
        }

    }

}
