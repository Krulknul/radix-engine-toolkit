/*
 * Transaction Library
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing Value
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ValueTests
    {
        // TODO uncomment below to declare an instance variable for Value
        //private Value instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Value
            //instance = new Value();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Value
        /// </summary>
        [Test]
        public void ValueInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" Value
            //Assert.IsInstanceOf(typeof(Value), instance);
        }

        /// <summary>
        /// Test deserialize a Array from type Value
        /// </summary>
        [Test]
        public void ArrayDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Array from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Array().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Bucket from type Value
        /// </summary>
        [Test]
        public void BucketDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Bucket from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Bucket().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Bytes from type Value
        /// </summary>
        [Test]
        public void BytesDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Bytes from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Bytes().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Component from type Value
        /// </summary>
        [Test]
        public void ComponentDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Component from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Component().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ComponentAddress from type Value
        /// </summary>
        [Test]
        public void ComponentAddressDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a ComponentAddress from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new ComponentAddress().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Decimal from type Value
        /// </summary>
        [Test]
        public void DecimalDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Decimal from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Decimal().ToJson()));
        }
        /// <summary>
        /// Test deserialize a EcdsaPublicKey from type Value
        /// </summary>
        [Test]
        public void EcdsaPublicKeyDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a EcdsaPublicKey from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new EcdsaPublicKey().ToJson()));
        }
        /// <summary>
        /// Test deserialize a EcdsaSignature from type Value
        /// </summary>
        [Test]
        public void EcdsaSignatureDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a EcdsaSignature from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new EcdsaSignature().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Ed25519PublicKey from type Value
        /// </summary>
        [Test]
        public void Ed25519PublicKeyDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Ed25519PublicKey from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Ed25519PublicKey().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Ed25519Signature from type Value
        /// </summary>
        [Test]
        public void Ed25519SignatureDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Ed25519Signature from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Ed25519Signature().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Enum from type Value
        /// </summary>
        [Test]
        public void EnumDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Enum from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Enum().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Hash from type Value
        /// </summary>
        [Test]
        public void HashDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Hash from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Hash().ToJson()));
        }
        /// <summary>
        /// Test deserialize a I128 from type Value
        /// </summary>
        [Test]
        public void I128DeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a I128 from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new I128().ToJson()));
        }
        /// <summary>
        /// Test deserialize a I16 from type Value
        /// </summary>
        [Test]
        public void I16DeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a I16 from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new I16().ToJson()));
        }
        /// <summary>
        /// Test deserialize a I32 from type Value
        /// </summary>
        [Test]
        public void I32DeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a I32 from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new I32().ToJson()));
        }
        /// <summary>
        /// Test deserialize a I64 from type Value
        /// </summary>
        [Test]
        public void I64DeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a I64 from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new I64().ToJson()));
        }
        /// <summary>
        /// Test deserialize a I8 from type Value
        /// </summary>
        [Test]
        public void I8DeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a I8 from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new I8().ToJson()));
        }
        /// <summary>
        /// Test deserialize a KeyValueStore from type Value
        /// </summary>
        [Test]
        public void KeyValueStoreDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a KeyValueStore from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new KeyValueStore().ToJson()));
        }
        /// <summary>
        /// Test deserialize a List from type Value
        /// </summary>
        [Test]
        public void ListDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a List from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new List().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Map from type Value
        /// </summary>
        [Test]
        public void MapDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Map from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Map().ToJson()));
        }
        /// <summary>
        /// Test deserialize a NonFungibleAddress from type Value
        /// </summary>
        [Test]
        public void NonFungibleAddressDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a NonFungibleAddress from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new NonFungibleAddress().ToJson()));
        }
        /// <summary>
        /// Test deserialize a NonFungibleId from type Value
        /// </summary>
        [Test]
        public void NonFungibleIdDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a NonFungibleId from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new NonFungibleId().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Option from type Value
        /// </summary>
        [Test]
        public void OptionDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Option from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Option().ToJson()));
        }
        /// <summary>
        /// Test deserialize a PackageAddress from type Value
        /// </summary>
        [Test]
        public void PackageAddressDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a PackageAddress from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new PackageAddress().ToJson()));
        }
        /// <summary>
        /// Test deserialize a PreciseDecimal from type Value
        /// </summary>
        [Test]
        public void PreciseDecimalDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a PreciseDecimal from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new PreciseDecimal().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Proof from type Value
        /// </summary>
        [Test]
        public void ProofDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Proof from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Proof().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ResourceAddress from type Value
        /// </summary>
        [Test]
        public void ResourceAddressDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a ResourceAddress from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new ResourceAddress().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Set from type Value
        /// </summary>
        [Test]
        public void SetDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Set from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Set().ToJson()));
        }
        /// <summary>
        /// Test deserialize a String from type Value
        /// </summary>
        [Test]
        public void StringDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a String from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new String().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Struct from type Value
        /// </summary>
        [Test]
        public void StructDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Struct from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Struct().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Tuple from type Value
        /// </summary>
        [Test]
        public void TupleDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Tuple from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Tuple().ToJson()));
        }
        /// <summary>
        /// Test deserialize a U128 from type Value
        /// </summary>
        [Test]
        public void U128DeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a U128 from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new U128().ToJson()));
        }
        /// <summary>
        /// Test deserialize a U16 from type Value
        /// </summary>
        [Test]
        public void U16DeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a U16 from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new U16().ToJson()));
        }
        /// <summary>
        /// Test deserialize a U32 from type Value
        /// </summary>
        [Test]
        public void U32DeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a U32 from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new U32().ToJson()));
        }
        /// <summary>
        /// Test deserialize a U64 from type Value
        /// </summary>
        [Test]
        public void U64DeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a U64 from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new U64().ToJson()));
        }
        /// <summary>
        /// Test deserialize a U8 from type Value
        /// </summary>
        [Test]
        public void U8DeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a U8 from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new U8().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Vault from type Value
        /// </summary>
        [Test]
        public void VaultDeserializeFromValueTest()
        {
            // TODO uncomment below to test deserialize a Vault from type Value
            //Assert.IsInstanceOf(typeof(Value), JsonConvert.DeserializeObject<Value>(new Vault().ToJson()));
        }

        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

    }

}
