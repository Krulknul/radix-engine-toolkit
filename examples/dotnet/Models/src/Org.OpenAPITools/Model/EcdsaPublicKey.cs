/*
 * Transaction Library
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EcdsaPublicKey
    /// </summary>
    [DataContract]
    public partial class EcdsaPublicKey : Value,  IEquatable<EcdsaPublicKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcdsaPublicKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EcdsaPublicKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EcdsaPublicKey" /> class.
        /// </summary>
        /// <param name="publicKey">publicKey (required).</param>
        public EcdsaPublicKey(string publicKey = default(string)) : base(type)
        {
            // to ensure "publicKey" is required (not null)
            if (publicKey == null)
            {
                throw new InvalidDataException("publicKey is a required property for EcdsaPublicKey and cannot be null");
            }
            else
            {
                this.PublicKey = publicKey;
            }

        }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [DataMember(Name="public_key", EmitDefaultValue=true)]
        public string PublicKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcdsaPublicKey {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcdsaPublicKey);
        }

        /// <summary>
        /// Returns true if EcdsaPublicKey instances are equal
        /// </summary>
        /// <param name="input">Instance of EcdsaPublicKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcdsaPublicKey input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PublicKey != null)
                    hashCode = hashCode * 59 + this.PublicKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
