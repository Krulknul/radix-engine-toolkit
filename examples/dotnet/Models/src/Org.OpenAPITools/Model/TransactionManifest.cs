/*
 * Transaction Library
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A transaction manifest which describes what happens in a transaction
    /// </summary>
    [DataContract]
    public partial class TransactionManifest :  IEquatable<TransactionManifest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionManifest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionManifest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionManifest" /> class.
        /// </summary>
        /// <param name="instructions">instructions (required).</param>
        /// <param name="blobs">An array of the blobs to use for the transaction (required).</param>
        public TransactionManifest(ManifestInstructions instructions = default(ManifestInstructions), List<string> blobs = default(List<string>))
        {
            // to ensure "instructions" is required (not null)
            if (instructions == null)
            {
                throw new InvalidDataException("instructions is a required property for TransactionManifest and cannot be null");
            }
            else
            {
                this.Instructions = instructions;
            }

            // to ensure "blobs" is required (not null)
            if (blobs == null)
            {
                throw new InvalidDataException("blobs is a required property for TransactionManifest and cannot be null");
            }
            else
            {
                this.Blobs = blobs;
            }

        }

        /// <summary>
        /// Gets or Sets Instructions
        /// </summary>
        [DataMember(Name="instructions", EmitDefaultValue=true)]
        public ManifestInstructions Instructions { get; set; }

        /// <summary>
        /// An array of the blobs to use for the transaction
        /// </summary>
        /// <value>An array of the blobs to use for the transaction</value>
        [DataMember(Name="blobs", EmitDefaultValue=true)]
        public List<string> Blobs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionManifest {\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  Blobs: ").Append(Blobs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionManifest);
        }

        /// <summary>
        /// Returns true if TransactionManifest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionManifest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionManifest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Instructions == input.Instructions ||
                    (this.Instructions != null &&
                    this.Instructions.Equals(input.Instructions))
                ) && 
                (
                    this.Blobs == input.Blobs ||
                    this.Blobs != null &&
                    input.Blobs != null &&
                    this.Blobs.SequenceEqual(input.Blobs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Instructions != null)
                    hashCode = hashCode * 59 + this.Instructions.GetHashCode();
                if (this.Blobs != null)
                    hashCode = hashCode * 59 + this.Blobs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
