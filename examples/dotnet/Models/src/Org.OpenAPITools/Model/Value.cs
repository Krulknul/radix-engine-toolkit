/*
 * Transaction Library
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Value
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    [JsonSubtypes.KnownSubType(typeof(Array), "Array")]
    [JsonSubtypes.KnownSubType(typeof(Bucket), "Bucket")]
    [JsonSubtypes.KnownSubType(typeof(Bytes), "Bytes")]
    [JsonSubtypes.KnownSubType(typeof(Component), "Component")]
    [JsonSubtypes.KnownSubType(typeof(ComponentAddress), "ComponentAddress")]
    [JsonSubtypes.KnownSubType(typeof(Decimal), "Decimal")]
    [JsonSubtypes.KnownSubType(typeof(EcdsaPublicKey), "EcdsaPublicKey")]
    [JsonSubtypes.KnownSubType(typeof(EcdsaSignature), "EcdsaSignature")]
    [JsonSubtypes.KnownSubType(typeof(Ed25519PublicKey), "Ed25519PublicKey")]
    [JsonSubtypes.KnownSubType(typeof(Ed25519Signature), "Ed25519Signature")]
    [JsonSubtypes.KnownSubType(typeof(Enum), "Enum")]
    [JsonSubtypes.KnownSubType(typeof(Hash), "Hash")]
    [JsonSubtypes.KnownSubType(typeof(I128), "I128")]
    [JsonSubtypes.KnownSubType(typeof(I16), "I16")]
    [JsonSubtypes.KnownSubType(typeof(I32), "I32")]
    [JsonSubtypes.KnownSubType(typeof(I64), "I64")]
    [JsonSubtypes.KnownSubType(typeof(I8), "I8")]
    [JsonSubtypes.KnownSubType(typeof(KeyValueStore), "KeyValueStore")]
    [JsonSubtypes.KnownSubType(typeof(List), "List")]
    [JsonSubtypes.KnownSubType(typeof(Map), "Map")]
    [JsonSubtypes.KnownSubType(typeof(NonFungibleAddress), "NonFungibleAddress")]
    [JsonSubtypes.KnownSubType(typeof(NonFungibleId), "NonFungibleId")]
    [JsonSubtypes.KnownSubType(typeof(Option), "Option")]
    [JsonSubtypes.KnownSubType(typeof(PackageAddress), "PackageAddress")]
    [JsonSubtypes.KnownSubType(typeof(PreciseDecimal), "PreciseDecimal")]
    [JsonSubtypes.KnownSubType(typeof(Proof), "Proof")]
    [JsonSubtypes.KnownSubType(typeof(ResourceAddress), "ResourceAddress")]
    [JsonSubtypes.KnownSubType(typeof(Set), "Set")]
    [JsonSubtypes.KnownSubType(typeof(String), "String")]
    [JsonSubtypes.KnownSubType(typeof(Struct), "Struct")]
    [JsonSubtypes.KnownSubType(typeof(Tuple), "Tuple")]
    [JsonSubtypes.KnownSubType(typeof(U128), "U128")]
    [JsonSubtypes.KnownSubType(typeof(U16), "U16")]
    [JsonSubtypes.KnownSubType(typeof(U32), "U32")]
    [JsonSubtypes.KnownSubType(typeof(U64), "U64")]
    [JsonSubtypes.KnownSubType(typeof(U8), "U8")]
    [JsonSubtypes.KnownSubType(typeof(Vault), "Vault")]
    public partial class Value :  IEquatable<Value>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Value" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Value()
        {
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public string Type { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Value {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Value);
        }

        /// <summary>
        /// Returns true if Value instances are equal
        /// </summary>
        /// <param name="input">Instance of Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Value input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
