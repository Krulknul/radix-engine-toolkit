{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Error",
  "oneOf": [
    {
      "description": "An error emitted when the decompilation of the notarized transaction intent fails",
      "type": "object",
      "oneOf": [
        {
          "description": "Emitted when the decoding of the SBOR payload into a transaction intent fails",
          "type": "object",
          "required": [
            "message",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "DecodeError"
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "description": "Emitted when the encoding of the SBOR payload into a transaction intent fails",
          "type": "object",
          "required": [
            "message",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "EncodeError"
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "description": "Emitted when the conversion of the signed intent fails",
          "type": "object",
          "oneOf": [
            {
              "description": "Emitted when the decoding of the SBOR payload into a transaction intent fails",
              "type": "object",
              "required": [
                "message",
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "DecodeError"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Emitted when the encoding of the SBOR payload into a transaction intent fails",
              "type": "object",
              "required": [
                "message",
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "EncodeError"
                  ]
                },
                "message": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Emitted when the conversion of the intent fails",
              "type": "object",
              "oneOf": [
                {
                  "description": "Emitted when the decoding of the SBOR payload into a transaction intent fails",
                  "type": "object",
                  "required": [
                    "message",
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "DecodeError"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Emitted when the encoding of the SBOR payload into a transaction intent fails",
                  "type": "object",
                  "required": [
                    "message",
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "EncodeError"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Emitted when the conversion of manifests fail",
                  "type": "object",
                  "oneOf": [
                    {
                      "description": "An error emitted if the conversion between the native and RET representations of the Instruction list fails.",
                      "type": "object",
                      "oneOf": [
                        {
                          "description": "Errors emitted during the conversion of instructions form the RET format to the native format used in Scrypto.",
                          "type": "object",
                          "oneOf": [
                            {
                              "description": "An error emitted if the conversion between the native and RET representations of the Manifest AST fails.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "description": "Enum discriminators could either be a `u8` or a `String` with a well-known mapping back to the numeric discriminator. This error is emitted when the mapping of a string variant name to `u8` discriminator fails.",
                                  "type": "object",
                                  "required": [
                                    "type",
                                    "variant_name"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "FailedToResolveEnumDiscriminator"
                                      ]
                                    },
                                    "variant_name": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "description": "This error is emitted during the conversion from the native AST models to the RET AST models if the number of elements in a map is odd (thus it's not a valid key value map).",
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "MapHasOddNumberOfElements"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "description": "An error emitted when unexpected contents of an element is encountered while performing the conversion.",
                                  "type": "object",
                                  "required": [
                                    "actual",
                                    "expected",
                                    "parsing",
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "UnexpectedContents"
                                      ]
                                    },
                                    "parsing": {
                                      "$ref": "#/definitions/ManifestAstValueKind"
                                    },
                                    "expected": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/ManifestAstValueKind"
                                      }
                                    },
                                    "actual": {
                                      "$ref": "#/definitions/ManifestAstValueKind"
                                    }
                                  }
                                },
                                {
                                  "description": "Emitted when an unexpected expression string is encountered which can not be mapped to the expression enum.",
                                  "type": "object",
                                  "required": [
                                    "actual",
                                    "expected",
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "InvalidExpressionString"
                                      ]
                                    },
                                    "expected": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "actual": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "description": "An error emitted when a value of an expected kind is encountered. Typically, this error is emitted when converting a ManifestAstValue to its underlying type.",
                                  "type": "object",
                                  "required": [
                                    "actual",
                                    "expected",
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "InvalidKind"
                                      ]
                                    },
                                    "expected": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/ManifestAstValueKind"
                                      }
                                    },
                                    "actual": {
                                      "$ref": "#/definitions/ManifestAstValueKind"
                                    }
                                  }
                                },
                                {
                                  "description": "An error emitted when trying to parse a string to a type fails.",
                                  "type": "object",
                                  "required": [
                                    "message",
                                    "parsing",
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "ParseError"
                                      ]
                                    },
                                    "parsing": {
                                      "type": "string"
                                    },
                                    "message": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "description": "An error emitted when address encoding or decoding fails.",
                                  "type": "object",
                                  "oneOf": [
                                    {
                                      "description": "Attempted to perform a Regex capture of the network specifier in the HRP. However, a network specifier could not be found for the given HRP.",
                                      "type": "object",
                                      "required": [
                                        "hrp",
                                        "type"
                                      ],
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "NoNetworkSpecifierMatchesFoundInHrp"
                                          ]
                                        },
                                        "hrp": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "description": "While attempting to extract the network id from the HRP we failed to extract the network id. This could mean that the logic itself is flawed, the network id could not be decoded to a u8 or due to other issues.",
                                      "type": "object",
                                      "required": [
                                        "hrp",
                                        "network_specifier",
                                        "type"
                                      ],
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "FailedToExtractNetworkId"
                                          ]
                                        },
                                        "hrp": {
                                          "type": "string"
                                        },
                                        "network_specifier": {
                                          "type": "string"
                                        },
                                        "network_id_string": {
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "description": "Represents an error emitted when the Bech32 decoding fails and an error is returned by the Bech32 library used.",
                                      "type": "object",
                                      "required": [
                                        "address",
                                        "type"
                                      ],
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "Bech32DecodeError"
                                          ]
                                        },
                                        "address": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "description": "A wrapper around the decode errors defined in Scrypto.",
                                      "type": "object",
                                      "required": [
                                        "message",
                                        "type"
                                      ],
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "ScryptoBech32DecodeError"
                                          ]
                                        },
                                        "message": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "description": "A wrapper around the encode errors defined in Scrypto.",
                                      "type": "object",
                                      "required": [
                                        "message",
                                        "type"
                                      ],
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "ScryptoBech32EncodeError"
                                          ]
                                        },
                                        "message": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "description": "This error is emitted when constructing a new address if the data section of the address is not of the length expected for addresses.",
                                      "type": "object",
                                      "required": [
                                        "actual",
                                        "expected",
                                        "type"
                                      ],
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "InvalidDataLength"
                                          ]
                                        },
                                        "expected": {
                                          "type": "integer",
                                          "format": "uint",
                                          "minimum": 0.0
                                        },
                                        "actual": {
                                          "type": "integer",
                                          "format": "uint",
                                          "minimum": 0.0
                                        }
                                      }
                                    }
                                  ],
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "AddressError"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "description": "An error emitted when the decoding of hex strings fail",
                                  "type": "object",
                                  "required": [
                                    "message",
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "HexDecodeError"
                                      ]
                                    },
                                    "message": {
                                      "type": "string"
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "ManifestAstValueConversionError"
                                  ]
                                }
                              }
                            },
                            {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "actual",
                                    "expected",
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "InvalidValueKind"
                                      ]
                                    },
                                    "expected": {
                                      "$ref": "#/definitions/ManifestAstValueKind"
                                    },
                                    "actual": {
                                      "$ref": "#/definitions/ManifestAstValueKind"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "FailedToSborDecode"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "FailedToSborEncode"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "FailedToGenerateValue"
                                      ]
                                    }
                                  }
                                }
                              ],
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "PackageSchemaResolutionError"
                                  ]
                                }
                              }
                            }
                          ],
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "InstructionConversionError"
                              ]
                            }
                          }
                        },
                        {
                          "description": "An error emitted when lexing a string manifest fails",
                          "type": "object",
                          "required": [
                            "message",
                            "type"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "ScryptoLexerError"
                              ]
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "description": "An error emitted when parsing a string manifest fails",
                          "type": "object",
                          "required": [
                            "message",
                            "type"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "ScryptoParserError"
                              ]
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "description": "An error emitted when generating values from a manifest fails",
                          "type": "object",
                          "required": [
                            "message",
                            "type"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "ScryptoGeneratorError"
                              ]
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "description": "An error emitted when the decompilation of manifests fail",
                          "type": "object",
                          "required": [
                            "message",
                            "type"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "ScryptoDecompileError"
                              ]
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      ],
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "InstructionConversionError"
                          ]
                        }
                      }
                    },
                    {
                      "description": "An error emitted when the decompilation of manifests fail",
                      "type": "object",
                      "required": [
                        "message",
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "ScryptoDecompileError"
                          ]
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "ManifestConversionError"
                      ]
                    }
                  }
                }
              ],
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "TransactionIntentConversionError"
                  ]
                }
              }
            }
          ],
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "SignedTransactionIntentConversionError"
              ]
            }
          }
        }
      ],
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "FailedToDecompileNotarizedIntent"
          ]
        }
      }
    }
  ],
  "definitions": {
    "ManifestAstValueKind": {
      "oneOf": [
        {
          "description": "A boolean value which can either be true or false",
          "examples": [
            {
              "kind": "Bool",
              "value": false
            },
            {
              "kind": "Bool",
              "value": true
            }
          ],
          "type": "string",
          "enum": [
            "Bool"
          ]
        },
        {
          "description": "An 8-bit unsigned integer which is serialized and deserialized as a string.",
          "examples": [
            {
              "kind": "U8",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "U8"
          ]
        },
        {
          "description": "A 16-bit unsigned integer which is serialized and deserialized as a string.",
          "examples": [
            {
              "kind": "U16",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "U16"
          ]
        },
        {
          "description": "A 32-bit unsigned integer which is serialized and deserialized as a string.",
          "examples": [
            {
              "kind": "U32",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "U32"
          ]
        },
        {
          "description": "A 64-bit unsigned integer which is serialized and deserialized as a string.",
          "examples": [
            {
              "kind": "U64",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "U64"
          ]
        },
        {
          "description": "A 128-bit unsigned integer which is serialized and deserialized as a string.",
          "examples": [
            {
              "kind": "U128",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "U128"
          ]
        },
        {
          "description": "An 8-bit signed integer which is serialized and deserialized as a string.",
          "examples": [
            {
              "kind": "I8",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "I8"
          ]
        },
        {
          "description": "A 16-bit signed integer which is serialized and deserialized as a string.",
          "examples": [
            {
              "kind": "I16",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "I16"
          ]
        },
        {
          "description": "A 32-bit signed integer which is serialized and deserialized as a string.",
          "examples": [
            {
              "kind": "I32",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "I32"
          ]
        },
        {
          "description": "A 64-bit signed integer which is serialized and deserialized as a string.",
          "examples": [
            {
              "kind": "I64",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "I64"
          ]
        },
        {
          "description": "A 128-bit signed integer which is serialized and deserialized as a string.",
          "examples": [
            {
              "kind": "I128",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "I128"
          ]
        },
        {
          "description": "A type representing a string",
          "examples": [
            {
              "kind": "String",
              "value": "Scrypto"
            }
          ],
          "type": "string",
          "enum": [
            "String"
          ]
        },
        {
          "description": "A Rust-style Enum which has a variant and can optionally also have a list of values (acting in a way similar to discriminated algebraic sum types)",
          "examples": [
            {
              "fields": [],
              "kind": "Enum",
              "variant": {
                "discriminator": "1",
                "type": "U8"
              }
            },
            {
              "fields": [],
              "kind": "Enum",
              "variant": {
                "discriminator": "EnumName::Variant",
                "type": "String"
              }
            },
            {
              "fields": [
                {
                  "kind": "U8",
                  "value": "1"
                }
              ],
              "kind": "Enum",
              "variant": {
                "discriminator": "1",
                "type": "U8"
              }
            },
            {
              "fields": [
                {
                  "kind": "U8",
                  "value": "1"
                }
              ],
              "kind": "Enum",
              "variant": {
                "discriminator": "EnumName::Variant",
                "type": "String"
              }
            }
          ],
          "type": "string",
          "enum": [
            "Enum"
          ]
        },
        {
          "description": "The `Some` case of Rust Options where the value is some Self",
          "examples": [
            {
              "kind": "Some",
              "value": {
                "kind": "U8",
                "value": "1"
              }
            }
          ],
          "type": "string",
          "enum": [
            "Some"
          ]
        },
        {
          "description": "The `None` case of Rust Options where there is value",
          "examples": [
            {
              "kind": "None"
            }
          ],
          "type": "string",
          "enum": [
            "None"
          ]
        },
        {
          "description": "The `Ok` case of Rust Results where the value is some Self",
          "examples": [
            {
              "kind": "Ok",
              "value": {
                "kind": "U8",
                "value": "1"
              }
            }
          ],
          "type": "string",
          "enum": [
            "Ok"
          ]
        },
        {
          "description": "The `Err` case of Rust Results where the value is some Self",
          "examples": [
            {
              "kind": "Err",
              "value": {
                "kind": "U8",
                "value": "1"
              }
            }
          ],
          "type": "string",
          "enum": [
            "Err"
          ]
        },
        {
          "description": "An array values of a single value kind",
          "examples": [
            {
              "element_kind": "U8",
              "elements": [
                {
                  "kind": "U8",
                  "value": "1"
                },
                {
                  "kind": "U8",
                  "value": "2"
                },
                {
                  "kind": "U8",
                  "value": "3"
                }
              ],
              "kind": "Array"
            }
          ],
          "type": "string",
          "enum": [
            "Array"
          ]
        },
        {
          "description": "A key-value map of values where all keys are of a single kind and all values are of a single kind",
          "examples": [
            {
              "entries": [
                [
                  {
                    "kind": "U8",
                    "value": "65"
                  },
                  {
                    "kind": "String",
                    "value": "A"
                  }
                ],
                [
                  {
                    "kind": "U8",
                    "value": "66"
                  },
                  {
                    "kind": "String",
                    "value": "B"
                  }
                ]
              ],
              "key_kind": "U8",
              "kind": "Map",
              "value_kind": "String"
            }
          ],
          "type": "string",
          "enum": [
            "Map"
          ]
        },
        {
          "description": "An array of elements where elements could be of different kinds.",
          "examples": [
            {
              "fields": [
                {
                  "fields": [
                    {
                      "kind": "U8",
                      "value": "1"
                    },
                    {
                      "kind": "String",
                      "value": "Something"
                    }
                  ],
                  "kind": "Tuple"
                }
              ],
              "kind": "Tuple"
            }
          ],
          "type": "string",
          "enum": [
            "Tuple"
          ]
        },
        {
          "description": "A Scrypto Decimal which has a precision of 18 decimal places and has a maximum and minimum of 57896044618658097711785492504343953926634992332820282019728.792003956564819967 and -57896044618658097711785492504343953926634992332820282019728.792003956564819968 respectively",
          "examples": [
            {
              "kind": "Decimal",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "Decimal"
          ]
        },
        {
          "description": "A Scrypto PreciseDecimal which has a precision of 64 decimal places and has a maximum and minimum of 670390396497129854978701249910292306373968291029619668886178072186088201503677348840093714. 9083451713845015929093243025426876941405973284973216824503042047 and -670390396497129854978701249910292306373968291029619668886178072186088201503677348840093714.9083451713845015929093243025426876941405973284973216824503042048 respectively",
          "examples": [
            {
              "kind": "PreciseDecimal",
              "value": "1"
            }
          ],
          "type": "string",
          "enum": [
            "PreciseDecimal"
          ]
        },
        {
          "description": "Represents a Bech32m encoded human-readable address which may be used to address a package, component, or resource. This address is serialized as a human-readable bech32m encoded string.",
          "examples": [
            {
              "kind": "Address",
              "value": "package_rdx1pkgxxxxxxxxxfaucetxxxxxxxxx000034355863xxxxxxxxxfaucet"
            },
            {
              "kind": "Address",
              "value": "resource_rdx1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxradxrd"
            },
            {
              "kind": "Address",
              "value": "clock_rdx1skxxxxxxxxxxclckxxxxxxxxxxx002253583992xxxxxxxxxclckxx"
            }
          ],
          "type": "string",
          "enum": [
            "Address"
          ]
        },
        {
          "description": "Represents a Scrypto bucket which is identified through a transient identifier which is either a string or an unsigned 32-bit integer which is serialized as a Integer.",
          "examples": [
            {
              "kind": "Bucket",
              "value": {
                "type": "String",
                "value": "bucket"
              }
            },
            {
              "kind": "Bucket",
              "value": {
                "type": "U32",
                "value": "1"
              }
            }
          ],
          "type": "string",
          "enum": [
            "Bucket"
          ]
        },
        {
          "description": "Represents a Scrypto proof which is identified through a transient identifier which is either a string or an unsigned 32-bit integer which is serialized as a Integer.",
          "examples": [
            {
              "kind": "Proof",
              "value": {
                "type": "String",
                "value": "proof"
              }
            },
            {
              "kind": "Proof",
              "value": {
                "type": "U32",
                "value": "1"
              }
            }
          ],
          "type": "string",
          "enum": [
            "Proof"
          ]
        },
        {
          "description": "Represents non-fungible ids which is a discriminated union of the different types that non-fungible ids may be.",
          "examples": [
            {
              "kind": "NonFungibleLocalId",
              "value": "{b55081fa-9cd1-48c2-95d4-efe2db322a54}"
            },
            {
              "kind": "NonFungibleLocalId",
              "value": "#1#"
            },
            {
              "kind": "NonFungibleLocalId",
              "value": "<Scrypto>"
            },
            {
              "kind": "NonFungibleLocalId",
              "value": "[01020304]"
            }
          ],
          "type": "string",
          "enum": [
            "NonFungibleLocalId"
          ]
        },
        {
          "description": "Represents a non-fungible address which may be considered as the \"global\" address of a non-fungible unit as it contains both the resource address and the non-fungible id for that unit.",
          "examples": [
            {
              "kind": "NonFungibleGlobalId",
              "non_fungible_local_id": {
                "kind": "NonFungibleLocalId",
                "value": "{b55081fa-9cd1-48c2-95d4-efe2db322a54}"
              },
              "resource_address": {
                "kind": "Address",
                "value": "resource_rdx1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxsecpsg"
              }
            },
            {
              "kind": "NonFungibleGlobalId",
              "non_fungible_local_id": {
                "kind": "NonFungibleLocalId",
                "value": "#1#"
              },
              "resource_address": {
                "kind": "Address",
                "value": "resource_rdx1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxsecpsg"
              }
            },
            {
              "kind": "NonFungibleGlobalId",
              "non_fungible_local_id": {
                "kind": "NonFungibleLocalId",
                "value": "<Scrypto>"
              },
              "resource_address": {
                "kind": "Address",
                "value": "resource_rdx1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxsecpsg"
              }
            },
            {
              "kind": "NonFungibleGlobalId",
              "non_fungible_local_id": {
                "kind": "NonFungibleLocalId",
                "value": "[01020304]"
              },
              "resource_address": {
                "kind": "Address",
                "value": "resource_rdx1nfxxxxxxxxxxsecpsgxxxxxxxxx004638826440xxxxxxxxxsecpsg"
              }
            }
          ],
          "type": "string",
          "enum": [
            "NonFungibleGlobalId"
          ]
        },
        {
          "description": "Represents a transaction manifest expression.",
          "examples": [
            {
              "kind": "Expression",
              "value": "ENTIRE_AUTH_ZONE"
            },
            {
              "kind": "Expression",
              "value": "ENTIRE_WORKTOP"
            }
          ],
          "type": "string",
          "enum": [
            "Expression"
          ]
        },
        {
          "description": "Represents the hash of a blob provided as part of a transaction manifest. This is represented as a byte array of 32 bytes which is serialized as a hex string.",
          "examples": [
            {
              "kind": "Blob",
              "value": "d28d2c3710601fbc097000ec73455693f4861dc0eb7c90d8821f2a13f617313e"
            }
          ],
          "type": "string",
          "enum": [
            "Blob"
          ]
        },
        {
          "description": "Represents a byte array of an unknown size which is serialized as a hex string",
          "examples": [
            {
              "hex": "d28d2c3710601fbc097000ec73455693f4861dc0eb7c90d8821f2a13f617313e",
              "kind": "Bytes"
            }
          ],
          "type": "string",
          "enum": [
            "Bytes"
          ]
        }
      ]
    }
  }
}